version: '3.4'
services:

  # The instance of MongoDB to store the BusinessAPI documents
  mongodb:
    image: mongo:4.4
    hostname: "mongo.db"
    networks:
      - backend
    environment:
      MONGO_DATA_DIR: /data/db
      MONGO_LOG_DIR: /dev/null
    volumes:
      - /data/mongodb:/data/db
    ports:
      - "27017"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # The instance of RedisDB to store the Deforestation dashboard documents
  redisdb:
    image: terrabrasilis/redis:v01
    ports:
      - "6379"
    networks:
      - backend
    volumes:
      - /data/redis:/data
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Deforestation dashbaord API
  redis-api:
    image: terrabrasilis/redis-api:v01
    ports:
      - "3000"
    networks:
      - proxy
      - backend
    depends_on:
      - redisdb
    environment:         
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Business API as a Service
  business-api:
    image: terrabrasilis/business-api:v1.2.1
    networks:
      - proxy
      - backend
    ports:
      - "8090"
    environment:   
      - "SPRING_PROFILES_ACTIVE=docker"
    depends_on:
      - mongodb
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    # healthcheck:
    #   # "curl", "-s", "-o", "/dev/null", "--head", "-w", "\"%{http_code}\"", "http://localhost:8090/api/v1/layer/health"]
    #   #  ["CMD", "curl", "-f", "http://localhost:8090/api/v1/layer/health"]
    #   test: ["CMD-SHELL", "curl -f http://localhost:8090/api/v1/layer/health || exit 1"]
    #   interval: 1m
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # File delivery service API with authentication
  file_delivery_api:
    image: terrabrasilis/file-delivery:v1.0.4
    hostname: file.delivery.auth
    volumes:
      - /data/deter-auth/generated-files:/data/files:ro
      - /data/deter-auth/logs:/logs
    secrets:
      - jwt.private.key
    environment:
      JWT_SECRET: /run/secrets/jwt.private.key
    networks:
      - proxy
    ports:
      - "9000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    # healthcheck:
    #   # httpcode=`curl -s -o /dev/null --head -w "%{http_code}" -X GET "http://localhost:9000/health"`; if [ ! $httpcode == "200" ]; then exit 1; fi
    #   test: ["CMD-SHELL", "curl -f http://localhost:9000/health || exit 1"]
    #   interval: 1m
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
        
  # Middleware authentication service
  oauth_api:
    image: terrabrasilis/terrabrasilis-oauth-api:v1.1.2
    hostname: oauth.api
    volumes:
      - /data/oauth-api/logs:/logs
    secrets:
      - jwt.private.key
    environment:
      JWT_SECRET: /run/secrets/jwt.private.key
    networks:
      - proxy
    ports:
      - "9000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Middleware timeseries service 
  timeseries_ocpu:
    image: terrabrasilis/terrabrasilis-timeseries:v1.0.0
    ports:
      - "8004:8004"
    networks:
      - proxy
    restart: always

secrets:
  jwt.private.key:
    external: true

networks:
  proxy:
    external: true
  backend:
    external: true
