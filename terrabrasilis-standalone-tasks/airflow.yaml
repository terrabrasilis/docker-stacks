version: '3.8'

x-airflow-common:
    &airflow-common
    image: ${AIRFLOW_IMAGE_NAME:-terrabrasilis/airflow:2.10.5-python3.9}
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN_CMD: 'cat /run/secrets/airflow_database_sql_alchemy_conn'
      AIRFLOW__CELERY__RESULT_BACKEND_CMD: 'cat /run/secrets/airflow_celery_result_backend_conn'
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis_prod:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__CORE__DEFAULT_TIMEZONE: 'America/Sao_Paulo'
      AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: 'America/Sao_Paulo'
      AIRFLOW__WEBSERVER__BASE_URL: 'https://ears.dpi.inpe.br/airflow'
      AIRFLOW_PROJECTS_DIR: '/opt/airflow/projects/'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
      AIRFLOW__SMTP__SMTP_HOST: "smtp.gmail.com"
      AIRFLOW__SMTP__SMTP_MAIL_FROM: "andrefuncate@gmail.com"
      AIRFLOW__SMTP__SMTP_PASSWORD_CMD: 'cat /run/secrets/airflow_smtp_password'
      AIRFLOW__SMTP__SMTP_PORT: 587
      AIRFLOW__SMTP__SMTP_SSL: "False"
      AIRFLOW__SMTP__SMTP_STARTTLS: "True"
      AIRFLOW__SMTP__SMTP_USER: "andrefuncate@gmail.com"
      AIRFLOW__EMAIL__SUBJECT_TEMPLATE: /opt/airflow/email_subject_template
      AIRFLOW__EMAIL__HTML_CONTENT_TEMPLATE: /opt/airflow/email_content_template
    volumes:
      - /main/ears/airflow/projects:/opt/airflow/projects
      - /main/ears/airflow/:/opt/airflow/
      - /main/ears/airflow/config/default:/etc/sudoers.d/default
      - /main/ears/airflow/config/shadow:/etc/shadow
    user: "1000:0"
    depends_on:
      - redis_prod
    secrets:
      - airflow_database_sql_alchemy_conn
      - airflow_celery_result_backend_conn
      - airflow_smtp_password

services:

  redis_prod:
    image: redis:7.2-bookworm
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z $${AIRFLOW_UID} ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "$${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      #_AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
      AIRFLOW_UID: 1000
    user: "0:0"
    volumes:
      - /main/ears/airflow:/sources 
    deploy:
      restart_policy:
        condition: none

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/airflow/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - airflow-init
        

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - airflow-init

  airflow-worker:
    <<: *airflow-common
    command: bash -c "cd /opt/airflow/ && airflow celery worker"
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - airflow-init

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - airflow-init

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/flower/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    depends_on:
      - airflow-init

secrets:
  airflow_database_sql_alchemy_conn:
    external: true
  airflow_celery_result_backend_conn:
    external: true
  airflow_smtp_password:
    external: true
